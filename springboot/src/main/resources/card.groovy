import HTTPClient.Cookie;
import HTTPClient.CookieModule;
import HTTPClient.HTTPResponse;
import HTTPClient.NVPair;
import net.grinder.plugin.http.HTTPPluginControl;
import net.grinder.plugin.http.HTTPRequest;
import net.grinder.script.GTest;
import net.grinder.scriptengine.groovy.junit.GrinderRunner;
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess;
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static net.grinder.script.Grinder.grinder;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author 戴茵
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test
    public static HTTPRequest request
    public static NVPair[] headers = []
    /*public static String body = "{\"role\":\"10\",\"userId\":\"94160044E388C9C18E37C8177E4B4005969BAA546752DA4AF12385E33A17B5B91566263561838\",\"model\":\"vivo1909\",\"sysVersion\":\"PD1931F_EX_A_1.6.4\",\"appVersion\":3710,\"pd\":\"PD1931F_EX\",\"language\":\"all\",\"lastQueryTime\":\"\"}"	*/
    // public static String body = "{\"role\":\"10\",\"userId\":\"94160044E388C9C18E37C8177E4B4005969BAA546752DA4AF12385E33A17B5B91566263561838\",\"model\":\"vivo1909\",\"sysVersion\":\"PD1931F_EX_A_1.6.4\",\"appVersion\":"

    public static Cookie[] cookies = []

    public static List list

    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000
        test = new GTest(1, "10.101.8.221")
        request = new HTTPRequest()
        // Set header datas
        List<NVPair> headerList = new ArrayList<NVPair>()
        headerList.add(new NVPair("Content-Type", "application/json"))
        headers = headerList.toArray()
        //  grinder.logger.info("before process.");
        list = new ArrayList();
        list.add("3203");
        list.add("3502");
        list.add("3400");
        list.add("3401");
        list.add("3710");
        list.add("3711");
    }

    @BeforeThread
    public void beforeThread() {
        test.record(this, "test")
        grinder.statistics.delayReports = true;
        //   grinder.logger.info("before thread.");
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        cookies.each { CookieModule.addCookie(it, HTTPPluginControl.getThreadHTTPClientContext()) }
        //  grinder.logger.info("before thread. init headers and cookies");
    }

    /**
     * @Title: randomAppVersion* @Description: 随机生成app版本号* @return: app版本号* @throws
     */
    public String randomAppVersion() {

        /* List list= new ArrayList<>();
         list.add("3203");
         list.add("3502");
         list.add("3400");
         list.add("3401");
         list.add("3710");
         list.add("3711");
        */
        Random random = new Random();
        int r = random.nextInt(list.size()); //获得随机下标
        String result = list.get(r);

        return result
    }

    @Test
    public void test() {
        String body = "{\"role\":\"10\",\"userId\":\"94160044E388C9C18E37C8177E4B4005969BAA546752DA4AF12385E33A17B5B91566263561838\",\"model\":\"vivo1909\",\"sysVersion\":\"PD1931F_EX_A_1.6.4\",\"appVersion\":"

        String appVersion = randomAppVersion()
        String body2 = ",\"pd\":\"PD1931F_EX\",\"language\":\"all\",\"lastQueryTime\":\"\"}"
        body = body + appVersion + body2

        //  System.out.println(body)

        HTTPResponse result = request.POST("http://10.101.8.221:8080/exscene/activity/card/query", body.getBytes())

        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            //  assertThat(result.statusCode, is(200));
            //  grinder.logger.warn("The response code was {}.", result.statusCode);
            //  System.out.println("***httpResponse.getEntity():"+result.toString());
            //  System.out.println("***httpResponse.getRetcode():"+result.text);
        }
    }
}

